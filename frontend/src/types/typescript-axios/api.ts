/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AdminCreate
 */
export interface AdminCreate {
    /**
     * 
     * @type {string}
     * @memberof AdminCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AdminCreate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AdminCreate
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Booking
 */
export interface Booking {
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    'id': string;
    /**
     * 
     * @type {UserBase}
     * @memberof Booking
     */
    'user': UserBase;
    /**
     * 
     * @type {Car}
     * @memberof Booking
     */
    'car': Car;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    'endTime': string;
    /**
     * 
     * @type {number}
     * @memberof Booking
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    'status': BookingStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    'referenceNumber': string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    'updatedAt': string;
}

export const BookingStatusEnum = {
    Unconfirmed: 'unconfirmed',
    Confirmed: 'confirmed',
    Canceled: 'canceled',
    Paid: 'paid',
    Completed: 'completed'
} as const;

export type BookingStatusEnum = typeof BookingStatusEnum[keyof typeof BookingStatusEnum];

/**
 * 
 * @export
 * @interface BookingCreate
 */
export interface BookingCreate {
    /**
     * 
     * @type {UserBase}
     * @memberof BookingCreate
     */
    'user': UserBase;
    /**
     * 
     * @type {string}
     * @memberof BookingCreate
     */
    'carId': string;
    /**
     * 
     * @type {string}
     * @memberof BookingCreate
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingCreate
     */
    'endTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof BookingCreate
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @interface BookingCreateResponse
 */
export interface BookingCreateResponse {
    /**
     * 
     * @type {string}
     * @memberof BookingCreateResponse
     */
    'referenceNumber': string;
}
/**
 * 
 * @export
 * @interface BookingReference
 */
export interface BookingReference {
    /**
     * 
     * @type {string}
     * @memberof BookingReference
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof BookingReference
     */
    'referenceNumber': string;
}
/**
 * 
 * @export
 * @interface BookingReferenceResponse
 */
export interface BookingReferenceResponse {
    /**
     * 
     * @type {string}
     * @memberof BookingReferenceResponse
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof BookingReferenceResponse
     */
    'endTime': string;
    /**
     * 
     * @type {number}
     * @memberof BookingReferenceResponse
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof BookingReferenceResponse
     */
    'status': BookingReferenceResponseStatusEnum;
    /**
     * 
     * @type {Car}
     * @memberof BookingReferenceResponse
     */
    'car': Car;
}

export const BookingReferenceResponseStatusEnum = {
    Unconfirmed: 'unconfirmed',
    Confirmed: 'confirmed',
    Canceled: 'canceled',
    Paid: 'paid',
    Completed: 'completed'
} as const;

export type BookingReferenceResponseStatusEnum = typeof BookingReferenceResponseStatusEnum[keyof typeof BookingReferenceResponseStatusEnum];

/**
 * 
 * @export
 * @interface BookingSummary
 */
export interface BookingSummary {
    /**
     * 
     * @type {CarSummary}
     * @memberof BookingSummary
     */
    'car': CarSummary;
    /**
     * 
     * @type {string}
     * @memberof BookingSummary
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof BookingSummary
     */
    'endTime': string;
}
/**
 * 
 * @export
 * @interface Car
 */
export interface Car {
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Car
     */
    'capacity': number;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'carNumber': string;
    /**
     * 
     * @type {number}
     * @memberof Car
     */
    'priceForInitialTwelveHours': number;
    /**
     * 
     * @type {number}
     * @memberof Car
     */
    'pricePerAdditionalSixHours': number;
}
/**
 * 
 * @export
 * @interface CarCreate
 */
export interface CarCreate {
    /**
     * 
     * @type {string}
     * @memberof CarCreate
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CarCreate
     */
    'capacity': number;
    /**
     * 
     * @type {string}
     * @memberof CarCreate
     */
    'carNumber': string;
    /**
     * 
     * @type {number}
     * @memberof CarCreate
     */
    'priceForInitialTwelveHours': number;
    /**
     * 
     * @type {number}
     * @memberof CarCreate
     */
    'pricePerAdditionalSixHours': number;
}
/**
 * 
 * @export
 * @interface CarSummary
 */
export interface CarSummary {
    /**
     * 
     * @type {string}
     * @memberof CarSummary
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CarSummary
     */
    'capacity': number;
    /**
     * 
     * @type {string}
     * @memberof CarSummary
     */
    'carNumber': string;
}
/**
 * 
 * @export
 * @interface CarUpdate
 */
export interface CarUpdate {
    /**
     * 
     * @type {string}
     * @memberof CarUpdate
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CarUpdate
     */
    'capacity': number;
    /**
     * 
     * @type {string}
     * @memberof CarUpdate
     */
    'carNumber': string;
    /**
     * 
     * @type {number}
     * @memberof CarUpdate
     */
    'priceForInitialTwelveHours': number;
    /**
     * 
     * @type {number}
     * @memberof CarUpdate
     */
    'pricePerAdditionalSixHours': number;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface UserBase
 */
export interface UserBase {
    /**
     * 
     * @type {string}
     * @memberof UserBase
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserBase
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Admin
         * @param {AdminCreate} adminCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdminAdminPost: async (adminCreate: AdminCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminCreate' is not null or undefined
            assertParamExists('createAdminAdminPost', 'adminCreate', adminCreate)
            const localVarPath = `/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login Admin
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAdminAdminLoginPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginAdminAdminLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginAdminAdminLoginPost', 'password', password)
            const localVarPath = `/admin/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Admin
         * @param {AdminCreate} adminCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAdminAdminPost(adminCreate: AdminCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAdminAdminPost(adminCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.createAdminAdminPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login Admin
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAdminAdminLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAdminAdminLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.loginAdminAdminLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Admin
         * @param {AdminCreate} adminCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdminAdminPost(adminCreate: AdminCreate, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.createAdminAdminPost(adminCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login Admin
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAdminAdminLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.loginAdminAdminLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @summary Create Admin
     * @param {AdminCreate} adminCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public createAdminAdminPost(adminCreate: AdminCreate, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).createAdminAdminPost(adminCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login Admin
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public loginAdminAdminLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).loginAdminAdminLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookingsApi - axios parameter creator
 * @export
 */
export const BookingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approve Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveBookingBookingsBookingIdApprovePatch: async (bookingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('approveBookingBookingsBookingIdApprovePatch', 'bookingId', bookingId)
            const localVarPath = `/bookings/{booking_id}/approve`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBookingBookingsBookingIdCancelPatch: async (bookingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('cancelBookingBookingsBookingIdCancelPatch', 'bookingId', bookingId)
            const localVarPath = `/bookings/{booking_id}/cancel`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Booking
         * @param {BookingCreate} bookingCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookingBookingsPost: async (bookingCreate: BookingCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingCreate' is not null or undefined
            assertParamExists('createBookingBookingsPost', 'bookingCreate', bookingCreate)
            const localVarPath = `/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Booking Summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingSummariesBookingsSummariesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookings/summaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Handle Payment Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlePaymentEventBookingsPaymentWebhookPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookings/payment/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Index Booking
         * @param {IndexBookingBookingsGetStatusEnum} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexBookingBookingsGet: async (status?: IndexBookingBookingsGetStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Booking
         * @param {BookingReference} bookingReference 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBookingBookingsSearchPost: async (bookingReference: BookingReference, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingReference' is not null or undefined
            assertParamExists('searchBookingBookingsSearchPost', 'bookingReference', bookingReference)
            const localVarPath = `/bookings/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingReference, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingsApi - functional programming interface
 * @export
 */
export const BookingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Approve Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveBookingBookingsBookingIdApprovePatch(bookingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveBookingBookingsBookingIdApprovePatch(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.approveBookingBookingsBookingIdApprovePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Cancel Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelBookingBookingsBookingIdCancelPatch(bookingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelBookingBookingsBookingIdCancelPatch(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.cancelBookingBookingsBookingIdCancelPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Booking
         * @param {BookingCreate} bookingCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBookingBookingsPost(bookingCreate: BookingCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBookingBookingsPost(bookingCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.createBookingBookingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Booking Summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookingSummariesBookingsSummariesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookingSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookingSummariesBookingsSummariesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.getBookingSummariesBookingsSummariesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Handle Payment Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlePaymentEventBookingsPaymentWebhookPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handlePaymentEventBookingsPaymentWebhookPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.handlePaymentEventBookingsPaymentWebhookPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Index Booking
         * @param {IndexBookingBookingsGetStatusEnum} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexBookingBookingsGet(status?: IndexBookingBookingsGetStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Booking>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexBookingBookingsGet(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.indexBookingBookingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search Booking
         * @param {BookingReference} bookingReference 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchBookingBookingsSearchPost(bookingReference: BookingReference, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingReferenceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchBookingBookingsSearchPost(bookingReference, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.searchBookingBookingsSearchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookingsApi - factory interface
 * @export
 */
export const BookingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Approve Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveBookingBookingsBookingIdApprovePatch(bookingId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.approveBookingBookingsBookingIdApprovePatch(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBookingBookingsBookingIdCancelPatch(bookingId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.cancelBookingBookingsBookingIdCancelPatch(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Booking
         * @param {BookingCreate} bookingCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookingBookingsPost(bookingCreate: BookingCreate, options?: RawAxiosRequestConfig): AxiosPromise<BookingCreateResponse> {
            return localVarFp.createBookingBookingsPost(bookingCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Booking Summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingSummariesBookingsSummariesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<BookingSummary>> {
            return localVarFp.getBookingSummariesBookingsSummariesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Handle Payment Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlePaymentEventBookingsPaymentWebhookPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.handlePaymentEventBookingsPaymentWebhookPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Index Booking
         * @param {IndexBookingBookingsGetStatusEnum} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexBookingBookingsGet(status?: IndexBookingBookingsGetStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<Booking>> {
            return localVarFp.indexBookingBookingsGet(status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Booking
         * @param {BookingReference} bookingReference 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBookingBookingsSearchPost(bookingReference: BookingReference, options?: RawAxiosRequestConfig): AxiosPromise<BookingReferenceResponse> {
            return localVarFp.searchBookingBookingsSearchPost(bookingReference, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookingsApi - object-oriented interface
 * @export
 * @class BookingsApi
 * @extends {BaseAPI}
 */
export class BookingsApi extends BaseAPI {
    /**
     * 
     * @summary Approve Booking
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public approveBookingBookingsBookingIdApprovePatch(bookingId: string, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).approveBookingBookingsBookingIdApprovePatch(bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel Booking
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public cancelBookingBookingsBookingIdCancelPatch(bookingId: string, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).cancelBookingBookingsBookingIdCancelPatch(bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Booking
     * @param {BookingCreate} bookingCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public createBookingBookingsPost(bookingCreate: BookingCreate, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).createBookingBookingsPost(bookingCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Booking Summaries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public getBookingSummariesBookingsSummariesGet(options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).getBookingSummariesBookingsSummariesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Handle Payment Event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public handlePaymentEventBookingsPaymentWebhookPost(options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).handlePaymentEventBookingsPaymentWebhookPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Index Booking
     * @param {IndexBookingBookingsGetStatusEnum} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public indexBookingBookingsGet(status?: IndexBookingBookingsGetStatusEnum, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).indexBookingBookingsGet(status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Booking
     * @param {BookingReference} bookingReference 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public searchBookingBookingsSearchPost(bookingReference: BookingReference, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).searchBookingBookingsSearchPost(bookingReference, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const IndexBookingBookingsGetStatusEnum = {
    Unconfirmed: 'unconfirmed',
    Confirmed: 'confirmed',
    Canceled: 'canceled',
    Paid: 'paid',
    Completed: 'completed'
} as const;
export type IndexBookingBookingsGetStatusEnum = typeof IndexBookingBookingsGetStatusEnum[keyof typeof IndexBookingBookingsGetStatusEnum];


/**
 * CarsApi - axios parameter creator
 * @export
 */
export const CarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Booking
         * @param {CarCreate} carCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookingCarsPost: async (carCreate: CarCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carCreate' is not null or undefined
            assertParamExists('createBookingCarsPost', 'carCreate', carCreate)
            const localVarPath = `/cars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Cars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarsCarsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Car
         * @param {string} carId 
         * @param {CarUpdate} carUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCarCarsCarIdPatch: async (carId: string, carUpdate: CarUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('updateCarCarsCarIdPatch', 'carId', carId)
            // verify required parameter 'carUpdate' is not null or undefined
            assertParamExists('updateCarCarsCarIdPatch', 'carUpdate', carUpdate)
            const localVarPath = `/cars/{car_id}`
                .replace(`{${"car_id"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarsApi - functional programming interface
 * @export
 */
export const CarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Booking
         * @param {CarCreate} carCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBookingCarsPost(carCreate: CarCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBookingCarsPost(carCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarsApi.createBookingCarsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Cars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarsCarsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Car>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarsCarsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarsApi.getCarsCarsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Car
         * @param {string} carId 
         * @param {CarUpdate} carUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCarCarsCarIdPatch(carId: string, carUpdate: CarUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCarCarsCarIdPatch(carId, carUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarsApi.updateCarCarsCarIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CarsApi - factory interface
 * @export
 */
export const CarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Booking
         * @param {CarCreate} carCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookingCarsPost(carCreate: CarCreate, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.createBookingCarsPost(carCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Cars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarsCarsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Car>> {
            return localVarFp.getCarsCarsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Car
         * @param {string} carId 
         * @param {CarUpdate} carUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCarCarsCarIdPatch(carId: string, carUpdate: CarUpdate, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateCarCarsCarIdPatch(carId, carUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarsApi - object-oriented interface
 * @export
 * @class CarsApi
 * @extends {BaseAPI}
 */
export class CarsApi extends BaseAPI {
    /**
     * 
     * @summary Create Booking
     * @param {CarCreate} carCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarsApi
     */
    public createBookingCarsPost(carCreate: CarCreate, options?: RawAxiosRequestConfig) {
        return CarsApiFp(this.configuration).createBookingCarsPost(carCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Cars
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarsApi
     */
    public getCarsCarsGet(options?: RawAxiosRequestConfig) {
        return CarsApiFp(this.configuration).getCarsCarsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Car
     * @param {string} carId 
     * @param {CarUpdate} carUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarsApi
     */
    public updateCarCarsCarIdPatch(carId: string, carUpdate: CarUpdate, options?: RawAxiosRequestConfig) {
        return CarsApiFp(this.configuration).updateCarCarsCarIdPatch(carId, carUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



